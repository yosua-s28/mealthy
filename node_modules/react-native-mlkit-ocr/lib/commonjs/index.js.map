{"version":3,"sources":["index.tsx"],"names":["MlkitOcr","NativeModules","MLKit","detectFromUri","uri","result","detectFromFile","path"],"mappings":";;;;;;;AAAA;;AAiEA,MAAMA,QAAwB,GAAGC,2BAAcD,QAA/C;AAEA,MAAME,KAAqB,GAAG;AAC5BC,EAAAA,aAAa,EAAE,MAAOC,GAAP,IAAuB;AACpC,UAAMC,MAAM,GAAG,MAAML,QAAQ,CAACG,aAAT,CAAuBC,GAAvB,CAArB;;AACA,QAAI,CAACC,MAAL,EAAa;AACX,aAAO,EAAP;AACD;;AACD,WAAOA,MAAP;AACD,GAP2B;AAQ5BC,EAAAA,cAAc,EAAE,MAAOC,IAAP,IAAwB;AACtC,UAAMF,MAAM,GAAG,MAAML,QAAQ,CAACM,cAAT,CAAwBC,IAAxB,CAArB;;AACA,QAAI,CAACF,MAAL,EAAa;AACX,aAAO,EAAP;AACD;;AACD,WAAOA,MAAP;AACD;AAd2B,CAA9B;eAiBeH,K","sourcesContent":["import { NativeModules } from 'react-native';\n\n// https://developers.google.com/ml-kit/reference/android\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n/**\n * The four corner points of the text block / line / element in\n * clockwise order starting with the top left\n * point relative to the image in the default\n * coordinate space.\n **/\nexport type CornerPoints = Array<Point | null>;\n\n/**\n * The rectangle that contains the text block / line / element\n * relative to the image in the default coordinate space.\n */\nexport type Bounding = {\n  left: number;\n  top: number;\n  height: number;\n  width: number;\n};\n\n/**\n * A text element recognized in an image.\n * A text element is roughly equivalent to\n * a space-separated word in most Latin-script languages.\n */\nexport type MLKTextElement = {\n  text: string;\n  cornerPoints: CornerPoints;\n  bounding: Bounding;\n};\n\n/**\n *  A text line recognized in an image that consists of an array of elements.\n * */\nexport type MLKTextLine = {\n  text: string;\n  elements: Array<MLKTextElement>;\n  cornerPoints: CornerPoints;\n  bounding: Bounding;\n};\n\n/**\n * A text block recognized in an image that consists of an array of text lines.\n */\nexport type MKLBlock = {\n  text: string;\n  lines: MLKTextLine[];\n  cornerPoints: CornerPoints;\n  bounding: Bounding;\n};\n\nexport type MlkitOcrResult = MKLBlock[];\n\ntype MlkitOcrModule = {\n  detectFromUri(uri: string): Promise<MlkitOcrResult>;\n  detectFromFile(path: string): Promise<MlkitOcrResult>;\n};\n\nconst MlkitOcr: MlkitOcrModule = NativeModules.MlkitOcr;\n\nconst MLKit: MlkitOcrModule = {\n  detectFromUri: async (uri: string) => {\n    const result = await MlkitOcr.detectFromUri(uri);\n    if (!result) {\n      return [];\n    }\n    return result;\n  },\n  detectFromFile: async (path: string) => {\n    const result = await MlkitOcr.detectFromFile(path);\n    if (!result) {\n      return [];\n    }\n    return result;\n  },\n};\n\nexport default MLKit;\n"]}